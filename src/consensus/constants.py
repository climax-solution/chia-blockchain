from typing import Any, Dict

constants: Dict[str, Any] = {
    "NUMBER_OF_HEADS": 3,  # The number of tips each full node keeps track of and propagates
    "DIFFICULTY_STARTING": 500,  # These are in units of 2^32
    "DIFFICULTY_FACTOR": 3,  # The next difficulty is truncated to range [prev / FACTOR, prev * FACTOR]
    "IPS_FACTOR": 3,  # The next ips is truncated to range [prev / FACTOR, prev * FACTOR]
    # These 3 constants must be changed at the same time
    "DIFFICULTY_EPOCH": 128,  # The number of blocks per epoch
    "DIFFICULTY_WARP_FACTOR": 4,  # DELAY divides EPOCH in order to warp efficiently.
    "DIFFICULTY_DELAY": 32,  # EPOCH / WARP_FACTOR
    "DISCRIMINANT_SIZE_BITS": 1024,
    "BLOCK_TIME_TARGET": 300,  # The target number of seconds per block
    # The number of seconds that that the VDF must be run for, at a minimum
    "MIN_BLOCK_TIME": 30,
    # For the first epoch, since we have no previous blocks, we can't estimate vdf iterations per second
    "VDF_IPS_STARTING": 5000,
    "MAX_FUTURE_TIME": 7200,  # The next block can have a timestamp of at most these many seconds more
    "NUMBER_OF_TIMESTAMPS": 11,  # Than the average of the last NUMBEBR_OF_TIMESTAMPS blocks
    # If an unfinished block is more than these many seconds slower than the best unfinished block,
    # don't propagate it.
    "PROPAGATION_THRESHOLD": 300,
    # If the expected time is more than these seconds, slightly delay the propagation of the unfinished
    # block, to allow better leaders to be released first. This is a slow block.
    "PROPAGATION_DELAY_THRESHOLD": 1500,
    # Hardcoded genesis block, generated using tests/block_tools.py
    # Replace this any time the constants change.
    "GENESIS_BLOCK": b'\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x15N3\xd3\xf9H\xc2K\x96\xfe\xf2f\xa2\xbf\x87\x0e\x0f,\xd0\xd4\x0f6s\xb1".\\\xf5\x8a\xb4\x03\x84\x8e\xf9\xbb\xa1\xca\xdef3:\xe4?\x0c\xe5\xc6\x12\x80\x88\xbe_6 X\xf1\x83\xe8\x99\xdf)\xb8\xf6t\xe0;\x82\x17\xc5\xe5\x94\xb7\xef\xc2|\x94\xe6\xfb\x91L\x85\xe4\x00WVV\xefJ\x1e/>\xf6\xc5Gr5n\x13\x00\x00\x00\x98\xe4\xd8(mep\xcf}\xdb\xd7(\x04N"\xd1I\x18g\xae[\xff\xc0#z\xee\xb7\xbd3f\xe4zR3mi-\x89\x88\xbc\xd3\xf0|\xee\x03\x13\xc9}\xbb\x9b\x7f\x7f\xcfj\x08\x01\xe0*\x1e\x9an\xf6\xba\xd5\xb1\xc1\x80\x96\x8a\x99\xe3\x91\x92j\xce\xfdij\xea\xccT\xd0[\xd0\x89\xdc\xb8\xa3 /\xf27\x0f\x9ce\x87\x9dK\xe7\xab\x01\xbb\x1e\x91U\x95\x0f\xc0c\xa3\xa4\x81Um\x80_\xee\x8f3\xc7\xe3?\xf5\xacyF\x941\x90\x9e\xd1\xd0\x0bB\xa4\xa4\xe18\x13\xd5x\xca\xbd\x9b;\xf9B\xa1y\xaasm\x14\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x03\xf9\x89\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00^\x1d\x06\xb8_\x85B=\xa2q\x01\xd6\x149\x18\xd1^\xa6F\'jB*&\x8d\xfa\xdf\x82q\xb5m\xb6\xdc)S\x87kiS\xa1D\xbd9\xb7bcro\x00\xad\xc0=\xdd\xd9\x08\xb1\xdcV\x03Vj\x101\xef\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xf6\xc9\xf6\xe2\xe3\xea\xfet)\xd2K\x7f-\x19\x0ew\x16\xd7\xac\xa4;\xd9\xde\xc89\x8c\xe0E\xe7\x151\x85\xca\x03n/\xd0]Z\xb7F*zQ\xb6e\x8a\xc2\xe8\xb7\xb8N.\xea\xc4\xdd\x7f\x83\xb6a\xa3\x0b\xf0\xad\x03\x00\x00\x03\xa6\x00\x0e\t\x80[\xf0Kp&\x9e\xfd\x94y\xbf.\x935\x9fE&"b\xdb\tqj\xf8\x85S\xe1\xef=8\xb4\xf0\xa4_6\x88\x85\xf5\xe0\x831(\x9b"\xb01\xba\xe0\xfc%+\xbf.\xa6\x1e\x7f\xf4{\xe9HN\x03\xff\xf9\x96\xc8\x84y)\t\xba\xe4\x1c\xe8\xf6\xd4g\x9f\xb3\x11\x1a,\xa53\x07E\x0c\x11\x9c\xfd\x90\xa4\x1a\xf7D\x8e\x99\xca\xcb*\x9bu\x7f8\x03\xe3m\xca\xc5\x83{v\x81\xffH\x8d\xd7\xcf\xf5(q\xd8\x1a;\xe8^\x17\x00\x00\x00\x00\x00\x00\x15\xce\x00C<\xe4\xa6J\xea\x9d\x90\x15cMK\xce+\xec\x88\xd3\xe9\xa0!\x81\x91pS\xa0\xe8\x13\xab<w\xd2\xee*\xa3\x82I\xc9\n\t\x9frg\xdf2[\xf0\x15h\xf5\x19\x1a\x12\xd3Y\xdad\xc0\tc\xbe\xf8\x1a\xb5i\x00\x0eC\xfa\x1a]\xb5\xed\xf5:\xad<\xad\xf5f\x08n(l\xe8\xc9\x0b\xfeyc\xcb\xb8\xa6\x86\x94\x10)\x95R\xd7\x8e\xd3S\x1b\xd4F8\xcf\xaccCi\x98\x83\xc1\xde\x9a.\xdf\xda\xafk\x06]\xb6lv\xdf[-\x00]+F\xe3\x89\xe4\x03\xfb\xf32\xaf\x15\xdaW\xcf\x8f_v9\xdb\x05\x97\xcfR\x84\x02\x81\x15\x91\xb50\xf1z\xce\xbf\xf0\x0f%\xd1\x924\x03~x\xf6\x82\xfb\xc9\xf6\xda\x91\xbe\x1c1s\xfah\x94\xa7\x93\xa3Y\xa7F\x00U\x1bYI"t\xa9y\x83\xf6\x9cw\xd8b\xf7\x92j"\xb24\xe8\x94\xa3\xe7\xe9\x073P\xf1_\xf2krM]\xec\x81\xbe3g\xfe\x8e\x03Y\xe4\xb9R\xad\x9f.ak\xd8\xba\xa3\xd2\x94\xf7efO,\xa2\xad\x00\x00\x00\x00\x00\x00tJ\x00\x1a\xba\xc6\x12\xbbf\xd7O\xf4\x0b\xf6\xc9L-(\xe1Y\xe8\xe9=v\xcbm\xae\x92\x9b\x8a<*T\xb6\x9bJ(\xf7\x0el\xb5\x1d\xcd\xd0\xdd\xf1\xaf$ \xb2\xbc\x1f\x85\xae\xc6\xd9i\xab\x12\xa2\xe4y\xb2\x8a\xc4jP\x00\x0c\x89$7\xac\xbez\xc4\x11\xb5\x01\xdc\x9eR\xccf\xa1Q\xce\xbe\x02\x89/\x01RD+4\xad\xa7\xab\x13\x17\x02|\xfe3\xa7\xbd%z\xe3B.\xc7R\xe0\xfbK\x19\xb3\xad\xbe\xcep\x17M\x82mMc\xf2\x0f\xff\x002u<\x95\x8c\x1d!\xed# \xc3\x88\xf5\x9cDC\xdc\xb5\xb0n\xa1~z0+\xd1>\xcf\xcc;\xc2L=[\'\xaf\x0c\xc7\\\xd1\\\xfc\xba\xb5Xoz\\\xdfW\xf6Y\xa46\x0cwep^%u\x996^\xff\xe5:\x1dc\x8c\x10\x19\xd0\xb6\xb9$\\$n\xfe?\x06diZ\xb2\xb4\x98\xb4\xb2\x8c\xc1\xfdvp\xd0!l\x90M\xdf\x19\x04\xe5\x8c\x04\xb4\xe97\xce;\xdd\xcb\x00A`\xfax\xce\xdf\x92=K\xb1G8\x9c\xdc\x89\x00\x00\x00\x00\x00\x03h,\x009D\x93\xbf\x06\xc0\x8b\\\xfd\xf2\xafb\xc7o%\x10\xd2c\'\xa1\xaal\xc7k\xc9\xbc/0\xb7\x88\xa5z\xcd\xf5G\\\x846\xb1\xde\x91\xf3/d\x9c\xfc\xfa\xaf\x1c0e\x9f\xe6\x94\xba\xfa\xc2\xccg^\xb1\x86\x0c\x8c\xff\xe5j\x19\xd5\xcdfe\xabP\xbf\xef\'\xd5\xd9\xbe\x95\xf6\xcc\xf2I\xed\xa8@\x0eWV\x05tN\xf6?\xd5G_\xfa\x17\xd9\xb1\xf1n\xcd\xc8\x86\xb1\x9c\xc5\xf1;Z\xdb6\xd8p\xb1\x17\xca=\x8c\xaf9\x88%\xea\x19\x00$I09#S\x16m\xe5\xc2\xb3;w\xe9\xd2+)K\xac\xc6\x83\x8f\x15|\xcb\xf66V\x9a \xa1$\xce-\x0c\x83\'\x01a\x86&\xad_\xe7\xdbd\xb0\xbf\x1d\x15\x82e}\xd8+\x819\xdf\x9f\xfa\xc9\xbd\xaeE\x00\x15\xc1qa\xd5\xa3\xe4\xaf\x0f\x9b\x15O\x0fG\x1eF\xbf\xc5\x96c\xca\xd3_\xaa\xf3\xdet;\r\xd5S\xd2\xfd\xdf:\xcc\x0c\xfd\x9bT\xce1\xa3xl;^Zf\xf4Qs\xc0|1\x16\xbc\n\xdd\x90\xf6\xa7y\xf3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00^_f\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x93h\xb0E\x0c\xaa\xda1\x9a\x04\x83 \xedGe\xf1\'\xab\xc7Z\x9d\xaf!\x18D#\t\x0bz\xe2\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf4\x00\x00\x00\x00\x00\x03\xf9\x89\xe6\xb0W\xbd\xdcn\x85bO\x85[\xb3V\xbc\xd1\xb9\t1\xe7\x16\x04\xe7\xa4\xc9[\xfb\x01\x82C"\xb3\xaa\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8b)\xaa\x96x8\xd76J\xa6\x8b[\x98\t\xe0\\\xe3^7qD\x8c\xf5q\x08\xf2\xa2\xc9\xb03mv\x00\x00\x0c\xbb\xa1\x06\xe0\x00N\x1f\xe8;}6F\xd7\xec\xc7\x83\x16T\x96\x1f\xe6\x88,\xa4\x9b\xa3Lo\xd0\xe6\x89jW\xac\xba\xae)\xe9\x91?\x97\x0fU\xf5\xd8\xdc\x9e\xce\xbf~\xad\xc2\xbc\x17v|\x947N\x0e\xfa\xff\xe6;\xce@|\xe9{\xe2:\xa8H\xb4\xb9\xde;<;-\x9a\x03\xbf\xa3\xff\xed\x81\x0cd\x80|(I\x9e\x8c\xa5\x83\xdf\x8a\x1aX\xc1#\x19uE`)\xeblV\x1d\x8f\xe6\x1f\xfa\x03\xe2\xf4b\xdfO\x9c\x11\x1fHJ2\xbfvC\x8b^\x8b)\xaa\x96x8\xd76J\xa6\x8b[\x98\t\xe0\\\xe3^7qD\x8c\xf5q\x08\xf2\xa2\xc9\xb03mv\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00N\t\x9a\x1b\xa9\xba\xac\r\x86\xf5\x7f\xd5&\x925\xcf6\x07P\x84M\x1bO\xdc\n\x16\xb6\xe0\xe6\xf73}\xd0\xf4\xc1\xf0\x13\xfd\x17\xde\x9c\\\x98.\xf1)i\x84\x0e\xa7\xd0\xc2<Gw\x08\x19\xed\xe4\xbb\x92\xe9\x82V\x0bcG\xc5\x18a+\x12fZ\x91>\x9a\xdc\x0b\x87\xbb\xf2/\xad\xc5;\xc3m\xf36/\xa4\xf0\xeb\xff\x13\x00\x00',  # noqa: E501
    # Target tx count per sec
    "TX_PER_SEC": 20,
    # Size of mempool = 10x the size of block
    "MEMPOOL_BLOCK_BUFFER": 10,
    # Coinbase rewards are not spendable for 200 blocks
    "COINBASE_FREEZE_PERIOD": 200,
    # Max coin amount int(1 << 48)
    "MAX_COIN_AMOUNT": 281474976710656,
    # Raw size per block target = 1,000,000 bytes
    # Rax TX (single in, single out) = 219 bytes (not compressed)
    # TX = 457 vBytes
    # floor(1,000,000 / 219) * 457 = 2086662 (size in vBytes)
    # Max block cost in virtual bytes
    "MAX_BLOCK_COST": 2086662,
}
